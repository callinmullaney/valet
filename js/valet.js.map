{"version":3,"sources":["valet.js"],"names":["$","Drupal","drupalSettings","behaviors","valet","attach","context","once","each","model","models","ValetModel","views","ValetView","el","find","Backbone","Model","extend","defaults","isOpen","View","initialize","this","$input","$el","down","click","toggle","bind","_","bindAll","document","keyDown","keyUp","self","get","removeClass","set","value","setTimeout","addClass","blur","val","attr","getData","autoComplete","focus","data","autocomplete","appendTo","minLength","delay","autoFocus","source","event","ui","select","item","go","label","_renderItem","length","substring","append","description","replace","window","location","pathname","open","cb","localStorage","JSON","parse","getItem","cache","timestamp","ajax","url","path","baseUrl","dataType","success","time","Math","floor","Date","getTime","setItem","stringify","error","xhr","ajaxOptions","thrownError","alert","status","e","keyCode","hotkey","modifier","target","is","preventDefault","jQuery"],"mappings":"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","file":"valet.js","sourcesContent":["/**\n * @file toolbar.js\n *\n * Defines the behavior of the Drupal administration toolbar.\n */\n(function ($, Drupal, drupalSettings) {\n\n  'use strict';\n\n  /**\n   * Set up and bind Valet.\n   */\n  Drupal.behaviors.valet = {\n\n    attach: function (context) {\n      // Process the administrative toolbar.\n      $('body').once('valet').each(function () {\n        var model = new Drupal.valet.models.ValetModel();\n        new Drupal.valet.views.ValetView({\n          el: $(context).find('#valet'),\n          model: model\n        });\n      });\n    }\n  };\n\n  Drupal.valet = Drupal.valet || {models: {}, views: {}};\n\n  /**\n   * Backbone Model for valet.\n   */\n  Drupal.valet.models.ValetModel = Backbone.Model.extend({\n    defaults: {\n      // Indicates whether the valet is currently running.\n      isOpen: false\n    }\n  });\n\n  /**\n   * Handles valet interactions.\n   */\n  Drupal.valet.views.ValetView = Backbone.View.extend({\n\n    /**\n     * Implements Backbone Views' initialize().\n     */\n    initialize: function () {\n      this.$input = this.$el.find('.valet-input');\n      this.down = [];\n      this.$el.find('.valet-close').click(this.toggle.bind(this));\n      _.bindAll(this, 'keyDown');\n      _.bindAll(this, 'keyUp');\n      $(document).bind('keydown', this.keyDown).bind('keyup', this.keyUp);\n    },\n\n    toggle: function () {\n      var self = this;\n      if (this.model.get('isOpen')) {\n        $(this.$el.removeClass('open'));\n        this.model.set('isOpen', false);\n        // trick to hide input text once the search overlay closes\n        // todo: hardcoded times, should be done after transition ends\n        if( this.$input[0].value !== '' ) {\n          setTimeout(function() {\n            self.$el.addClass('hideInput');\n            setTimeout(function() {\n              self.$el.removeClass('hideInput');\n              self.$input[0].value = '';\n            }, 300 );\n          }, 500);\n        }\n        this.$input[0].blur();\n      }\n      else{\n        this.$input.val('').attr('disabled', false);\n        this.getData(this.autoComplete.bind(this));\n        $(this.$el.addClass('open'));\n        this.model.set('isOpen', true);\n        this.$input.focus();\n      }\n    },\n\n    autoComplete: function ( data ) {\n      var self = this;\n      this.$input.once('valet').autocomplete({\n        appendTo: '#valet-results',\n        minLength: 1,\n        delay: 0,\n        autoFocus: true,\n        source: data,\n        focus: function( event, ui ) {\n          return false;\n        },\n        select: function( event, ui ) {\n          if(ui.item){\n            self.go(ui.item.label, ui.item.value);\n            return false;\n          }\n        },\n      })\n      // Add some magical style to our results\n      .autocomplete( 'instance' )._renderItem = function( ui, item ) {\n        var value = item.value.length > 85  ? item.value.substring(0,85)+'...' : (item.value.length > 0 ? item.value : '/')\n        return $( '<li></li>' )\n          .append( '<a><strong>' + item.label + '</strong> <small>' + value + '</small><br><em>' + item.description + '</em></a>' )\n          .appendTo( ui );\n      };\n    },\n\n    go: function (label, value) {\n      value = value.replace('RETURN_URL', window.location.pathname.substring(1));\n\n      if (this.down[16]) {\n        this.down[16] = false;\n        this.toggle();\n        window.open(value);\n      }\n      else{\n        this.$input.val( 'Loading...' ).attr('disabled', true);\n        window.location = value;\n      }\n    },\n\n    getData: function(cb) {\n      var self = this;\n      var data = localStorage ? JSON.parse(localStorage.getItem('valet')) : null;\n      if( data && drupalSettings.valet.cache && data.timestamp >= drupalSettings.valet.cache ){\n        return cb(data.data);\n      }\n      else{\n        self.$input.val( 'Loading data...' ).attr('disabled', true);\n        $.ajax({\n          url: drupalSettings.path.baseUrl+'api/valet',\n          dataType: 'json',\n          success: function(data) {\n            self.$input.val('').attr('disabled', false).focus();\n            if (localStorage) {\n              var time = Math.floor(new Date().getTime() / 1000);\n              localStorage.setItem('valet', JSON.stringify({timestamp: time, data: data}));\n            }\n            return cb(data);\n          },\n          error: function (xhr, ajaxOptions, thrownError) {\n            alert(xhr.status);\n            alert(thrownError);\n            return cb(null);\n          }\n        });\n      }\n    },\n\n    keyDown: function(e) {\n      if(this.model.get('isOpen') && e.keyCode === 27){\n        this.toggle();\n        return;\n      }\n      this.down[e.keyCode] = true;\n\n      if (this.down[drupalSettings.valet.hotkey] && this.down[drupalSettings.valet.modifier] && !$(e.target).is(':focus')) {\n        e.preventDefault();\n        this.toggle();\n      }\n    },\n\n    keyUp: function(e) {\n      this.down[e.keyCode] = false;\n    }\n\n  });\n\n}(jQuery, Drupal, drupalSettings));\n"],"sourceRoot":"/source/"}